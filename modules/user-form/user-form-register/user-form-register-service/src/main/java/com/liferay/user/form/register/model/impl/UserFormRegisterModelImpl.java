/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.user.form.register.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.user.form.register.model.UserFormRegister;
import com.liferay.user.form.register.model.UserFormRegisterModel;
import com.liferay.user.form.register.model.UserFormRegisterSoap;
import com.liferay.user.form.register.service.persistence.UserFormRegisterPK;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the UserFormRegister service. Represents a row in the &quot;User_UserFormRegister&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UserFormRegisterModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserFormRegisterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserFormRegisterImpl
 * @generated
 */
@JSON(strict = true)
public class UserFormRegisterModelImpl
	extends BaseModelImpl<UserFormRegister> implements UserFormRegisterModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user form register model instance should use the <code>UserFormRegister</code> interface instead.
	 */
	public static final String TABLE_NAME = "User_UserFormRegister";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"userFormRegisterId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"name", Types.VARCHAR}, {"surname", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"birthday", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userFormRegisterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("surname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("birthday", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table User_UserFormRegister (uuid_ VARCHAR(75) null,userFormRegisterId LONG not null,groupId LONG,createDate DATE null,name VARCHAR(75) null,surname VARCHAR(75) null,email VARCHAR(75) not null,birthday DATE null,primary key (userFormRegisterId, email))";

	public static final String TABLE_SQL_DROP =
		"drop table User_UserFormRegister";

	public static final String ORDER_BY_JPQL =
		" ORDER BY userFormRegister.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY User_UserFormRegister.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMAIL_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static UserFormRegister toModel(UserFormRegisterSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserFormRegister model = new UserFormRegisterImpl();

		model.setUuid(soapModel.getUuid());
		model.setUserFormRegisterId(soapModel.getUserFormRegisterId());
		model.setGroupId(soapModel.getGroupId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setName(soapModel.getName());
		model.setSurname(soapModel.getSurname());
		model.setEmail(soapModel.getEmail());
		model.setBirthday(soapModel.getBirthday());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<UserFormRegister> toModels(
		UserFormRegisterSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<UserFormRegister> models = new ArrayList<UserFormRegister>(
			soapModels.length);

		for (UserFormRegisterSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public UserFormRegisterModelImpl() {
	}

	@Override
	public UserFormRegisterPK getPrimaryKey() {
		return new UserFormRegisterPK(_userFormRegisterId, _email);
	}

	@Override
	public void setPrimaryKey(UserFormRegisterPK primaryKey) {
		setUserFormRegisterId(primaryKey.userFormRegisterId);
		setEmail(primaryKey.email);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new UserFormRegisterPK(_userFormRegisterId, _email);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((UserFormRegisterPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return UserFormRegister.class;
	}

	@Override
	public String getModelClassName() {
		return UserFormRegister.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UserFormRegister, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UserFormRegister, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserFormRegister, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((UserFormRegister)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UserFormRegister, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UserFormRegister, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UserFormRegister)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UserFormRegister, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UserFormRegister, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, UserFormRegister>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			UserFormRegister.class.getClassLoader(), UserFormRegister.class,
			ModelWrapper.class);

		try {
			Constructor<UserFormRegister> constructor =
				(Constructor<UserFormRegister>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<UserFormRegister, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<UserFormRegister, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<UserFormRegister, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<UserFormRegister, Object>>();
		Map<String, BiConsumer<UserFormRegister, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<UserFormRegister, ?>>();

		attributeGetterFunctions.put("uuid", UserFormRegister::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<UserFormRegister, String>)UserFormRegister::setUuid);
		attributeGetterFunctions.put(
			"userFormRegisterId", UserFormRegister::getUserFormRegisterId);
		attributeSetterBiConsumers.put(
			"userFormRegisterId",
			(BiConsumer<UserFormRegister, Long>)
				UserFormRegister::setUserFormRegisterId);
		attributeGetterFunctions.put("groupId", UserFormRegister::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<UserFormRegister, Long>)UserFormRegister::setGroupId);
		attributeGetterFunctions.put(
			"createDate", UserFormRegister::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<UserFormRegister, Date>)
				UserFormRegister::setCreateDate);
		attributeGetterFunctions.put("name", UserFormRegister::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<UserFormRegister, String>)UserFormRegister::setName);
		attributeGetterFunctions.put("surname", UserFormRegister::getSurname);
		attributeSetterBiConsumers.put(
			"surname",
			(BiConsumer<UserFormRegister, String>)UserFormRegister::setSurname);
		attributeGetterFunctions.put("email", UserFormRegister::getEmail);
		attributeSetterBiConsumers.put(
			"email",
			(BiConsumer<UserFormRegister, String>)UserFormRegister::setEmail);
		attributeGetterFunctions.put("birthday", UserFormRegister::getBirthday);
		attributeSetterBiConsumers.put(
			"birthday",
			(BiConsumer<UserFormRegister, Date>)UserFormRegister::setBirthday);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getUserFormRegisterId() {
		return _userFormRegisterId;
	}

	@Override
	public void setUserFormRegisterId(long userFormRegisterId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userFormRegisterId = userFormRegisterId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getSurname() {
		if (_surname == null) {
			return "";
		}
		else {
			return _surname;
		}
	}

	@Override
	public void setSurname(String surname) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_surname = surname;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalEmail() {
		return getColumnOriginalValue("email");
	}

	@JSON
	@Override
	public Date getBirthday() {
		return _birthday;
	}

	@Override
	public void setBirthday(Date birthday) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_birthday = birthday;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public UserFormRegister toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, UserFormRegister>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserFormRegisterImpl userFormRegisterImpl = new UserFormRegisterImpl();

		userFormRegisterImpl.setUuid(getUuid());
		userFormRegisterImpl.setUserFormRegisterId(getUserFormRegisterId());
		userFormRegisterImpl.setGroupId(getGroupId());
		userFormRegisterImpl.setCreateDate(getCreateDate());
		userFormRegisterImpl.setName(getName());
		userFormRegisterImpl.setSurname(getSurname());
		userFormRegisterImpl.setEmail(getEmail());
		userFormRegisterImpl.setBirthday(getBirthday());

		userFormRegisterImpl.resetOriginalValues();

		return userFormRegisterImpl;
	}

	@Override
	public int compareTo(UserFormRegister userFormRegister) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), userFormRegister.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof UserFormRegister)) {
			return false;
		}

		UserFormRegister userFormRegister = (UserFormRegister)object;

		UserFormRegisterPK primaryKey = userFormRegister.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<UserFormRegister> toCacheModel() {
		UserFormRegisterCacheModel userFormRegisterCacheModel =
			new UserFormRegisterCacheModel();

		userFormRegisterCacheModel.userFormRegisterPK = getPrimaryKey();

		userFormRegisterCacheModel.uuid = getUuid();

		String uuid = userFormRegisterCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			userFormRegisterCacheModel.uuid = null;
		}

		userFormRegisterCacheModel.userFormRegisterId = getUserFormRegisterId();

		userFormRegisterCacheModel.groupId = getGroupId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			userFormRegisterCacheModel.createDate = createDate.getTime();
		}
		else {
			userFormRegisterCacheModel.createDate = Long.MIN_VALUE;
		}

		userFormRegisterCacheModel.name = getName();

		String name = userFormRegisterCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			userFormRegisterCacheModel.name = null;
		}

		userFormRegisterCacheModel.surname = getSurname();

		String surname = userFormRegisterCacheModel.surname;

		if ((surname != null) && (surname.length() == 0)) {
			userFormRegisterCacheModel.surname = null;
		}

		userFormRegisterCacheModel.email = getEmail();

		String email = userFormRegisterCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			userFormRegisterCacheModel.email = null;
		}

		Date birthday = getBirthday();

		if (birthday != null) {
			userFormRegisterCacheModel.birthday = birthday.getTime();
		}
		else {
			userFormRegisterCacheModel.birthday = Long.MIN_VALUE;
		}

		return userFormRegisterCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UserFormRegister, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UserFormRegister, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserFormRegister, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((UserFormRegister)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<UserFormRegister, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<UserFormRegister, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserFormRegister, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((UserFormRegister)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, UserFormRegister>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _userFormRegisterId;
	private long _groupId;
	private Date _createDate;
	private String _name;
	private String _surname;
	private String _email;
	private Date _birthday;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<UserFormRegister, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((UserFormRegister)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("userFormRegisterId", _userFormRegisterId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("surname", _surname);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("birthday", _birthday);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("userFormRegisterId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("createDate", 8L);

		columnBitmasks.put("name", 16L);

		columnBitmasks.put("surname", 32L);

		columnBitmasks.put("email", 64L);

		columnBitmasks.put("birthday", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private UserFormRegister _escapedModel;

}